'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

/* eslint no-magic-numbers: ["error", { "ignore": [1, 5, 24, 48, 60000, 3600000] }] */
function xMinutesAgo(dateStr) {
  var date = new Date(dateStr);
  var dateTime = date.getTime();

  if (isNaN(dateTime)) {
    return dateStr;
  }

  var now = Date.now();
  var deltaInMs = now - dateTime;
  var deltaInMinutes = Math.floor(deltaInMs / 60000);
  var deltaInHours = Math.floor(deltaInMs / 3600000);

  if (deltaInMinutes < 1) {
    return 'Juuri nyt';
  } else if (deltaInMinutes === 1) {
    return 'Minuutti sitten';
  } else if (deltaInHours < 1) {
    return ''.concat(deltaInMinutes, ' minuuttia sitten');
  } else if (deltaInHours === 1) {
    return 'Tunti sitten';
  } else if (deltaInHours < 5) {
    return ''.concat(deltaInHours, ' tuntia sitten');
  } else if (deltaInHours <= 24) {
    return 'T\xE4n\xE4\xE4n';
  } else if (deltaInHours <= 48) {
    return 'Eilen';
  } else if (window.Intl) {
    return new Intl.DateTimeFormat('fi-FI').format(date);
  }

  return date.toLocaleString('fi-FI', {
    day: '2-digit',
    hour: '2-digit',
    hour12: false,
    minute: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function botSaidSomething(avatarInitials, text) {
  return 'Botti '.concat(avatarInitials, ' sanoi, ').concat(text);
}

function downloadFileWithFileSize(downloadFileText, fileName, size) {
  // Full text should read: "Download file <filename> of size <filesize>"
  return 'Lataa tiedosto '.concat(fileName, ', koko: ').concat(size);
}

function uploadFileWithFileSize(fileName, size) {
  return ''.concat(fileName, ', koko: ').concat(size);
}

function userSaidSomething(avatarInitials, text) {
  return 'K\xE4ytt\xE4j\xE4 '.concat(avatarInitials, ' sanoi, ').concat(text);
}

var _default = {
  CONNECTED_NOTIFICATION: 'Yhdistetty',
  FAILED_CONNECTION_NOTIFICATION: 'Ei voitu yhdistää.',
  INITIAL_CONNECTION_NOTIFICATION: 'Yhdistää…',
  INTERRUPTED_CONNECTION_NOTIFICATION: 'Yhteys palvelimeen keskeytyi. Yhdistää uudelleen…',
  RENDER_ERROR_NOTIFICATION: 'Renderöintivirhe. Ole hyvä ja katso konsolia tai ota yhteys botin kehittäjään.',
  // Do not localize {Retry}; it is a placeholder for "Retry". English translation should be, "Send failed. Retry."
  SEND_FAILED_KEY: 'L\xE4hetys ep\xE4onnistui, {Retry}.',
  SLOW_CONNECTION_NOTIFICATION: 'Yhteyden muodostaminen kestää kauemmin kuin yleensä.',
  'Bot said something': botSaidSomething,
  'User said something': userSaidSomething,
  'X minutes ago': xMinutesAgo,
  // The following two errors make more sence in English than Finnish
  'Adaptive Card parse error': 'Adaptive Card parse error',
  'Adaptive Card render error': 'Adaptive Card render error',
  BotSent: 'Botti lähetti: ',
  Chat: 'Chat',
  'Download file': 'Lataa tiedosto',
  DownloadFileWithFileSize: downloadFileWithFileSize,
  ErrorMessage: 'Virheviesti',
  'Microphone off': 'Mikrofoni pois päältä',
  'Microphone on': 'Mikrofoni päällä',
  Left: 'Vasen',
  'Listening…': 'Kuuntelee…',
  'New messages': 'Uusia viestejä',
  Retry: 'yritä uudelleen',
  Right: 'Oikea',
  Send: 'Lähetä',
  SendBox: 'Sendbox',
  Sending: 'Lähettää…',
  SendStatus: 'Lähetyksen tila: ',
  SentAt: 'Lähetetty: ',
  Speak: 'Puhu',
  'Starting…': 'Aloittaa…',
  Tax: 'Vero',
  Total: 'Yhteensä',
  'Type your message': 'Kirjoita viesti',
  TypingIndicator: 'Kirjoitusindikaattori näkyy',
  'Upload file': 'Lataa tiedosto',
  UploadFileWithFileSize: uploadFileWithFileSize,
  UserSent: 'Käyttäjä lähetti: ',
  VAT: 'ALV'
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
