'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = createCognitiveServicesSpeechServicesPonyfillFactory;

var _AudioConfig = require('microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig');

var _SpeechServices = _interopRequireDefault(require('web-speech-cognitive-services/lib/SpeechServices'));

function createCognitiveServicesSpeechServicesPonyfillFactory(_ref) {
  var audioConfig = _ref.audioConfig,
    authorizationToken = _ref.authorizationToken,
    enableTelemetry = _ref.enableTelemetry,
    region = _ref.region,
    speechRecognitionEndpointId = _ref.speechRecognitionEndpointId,
    speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId,
    speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat,
    subscriptionKey = _ref.subscriptionKey,
    textNormalization = _ref.textNormalization;

  // HACK: We should prevent AudioContext object from being recreated because they may be blessed and UX-wise expensive to recreate.
  //       In Cognitive Services SDK, if they detect the "end" function is falsy, they will not call "end" but "suspend" instead.
  //       And on next recognition, they will re-use the AudioContext object.
  if (!audioConfig) {
    audioConfig = _AudioConfig.AudioConfig.fromDefaultMicrophoneInput();
    var source = audioConfig.privSource; // This piece of code is adopted from microsoft-cognitiveservices-speech-sdk/common.browser/MicAudioSource.ts.
    // Instead of closing the AudioContext, it will just suspend it. And the next time it is needed, it will be resumed (by the original code).

    source.destroyAudioContext = function() {
      if (!source.privContext) {
        return;
      }

      source.privRecorder.releaseMediaResources(source.privContext);
      source.privContext.state === 'running' && source.privContext.suspend();
    };
  }

  return function(_ref2) {
    var referenceGrammarID = _ref2.referenceGrammarID;
    var ponyfill = (0, _SpeechServices.default)({
      audioConfig: audioConfig,
      authorizationToken: authorizationToken,
      enableTelemetry: enableTelemetry,
      referenceGrammars: ['luis/'.concat(referenceGrammarID, '-PRODUCTION')],
      region: region,
      speechRecognitionEndpointId: speechRecognitionEndpointId,
      speechSynthesisDeploymentId: speechSynthesisDeploymentId,
      speechSynthesisOutputFormat: speechSynthesisOutputFormat,
      subscriptionKey: subscriptionKey,
      textNormalization: textNormalization
    });
    var SpeechGrammarList = ponyfill.SpeechGrammarList,
      SpeechRecognition = ponyfill.SpeechRecognition,
      speechSynthesis = ponyfill.speechSynthesis,
      SpeechSynthesisUtterance = ponyfill.SpeechSynthesisUtterance;
    return {
      SpeechGrammarList: SpeechGrammarList,
      SpeechRecognition: SpeechRecognition,
      speechSynthesis: speechSynthesis,
      SpeechSynthesisUtterance: SpeechSynthesisUtterance
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVDb2duaXRpdmVTZXJ2aWNlc1NwZWVjaFNlcnZpY2VzUG9ueWZpbGxGYWN0b3J5LmpzIl0sIm5hbWVzIjpbImNyZWF0ZUNvZ25pdGl2ZVNlcnZpY2VzU3BlZWNoU2VydmljZXNQb255ZmlsbEZhY3RvcnkiLCJhdWRpb0NvbmZpZyIsImF1dGhvcml6YXRpb25Ub2tlbiIsImVuYWJsZVRlbGVtZXRyeSIsInJlZ2lvbiIsInNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCIsInNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZCIsInNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCIsInN1YnNjcmlwdGlvbktleSIsInRleHROb3JtYWxpemF0aW9uIiwiQXVkaW9Db25maWciLCJmcm9tRGVmYXVsdE1pY3JvcGhvbmVJbnB1dCIsInNvdXJjZSIsInByaXZTb3VyY2UiLCJkZXN0cm95QXVkaW9Db250ZXh0IiwicHJpdkNvbnRleHQiLCJwcml2UmVjb3JkZXIiLCJyZWxlYXNlTWVkaWFSZXNvdXJjZXMiLCJzdGF0ZSIsInN1c3BlbmQiLCJyZWZlcmVuY2VHcmFtbWFySUQiLCJwb255ZmlsbCIsInJlZmVyZW5jZUdyYW1tYXJzIiwiU3BlZWNoR3JhbW1hckxpc3QiLCJTcGVlY2hSZWNvZ25pdGlvbiIsInNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRWUsU0FBU0Esb0RBQVQsT0FVWjtBQUFBLE1BVERDLFdBU0MsUUFUREEsV0FTQztBQUFBLE1BUkRDLGtCQVFDLFFBUkRBLGtCQVFDO0FBQUEsTUFQREMsZUFPQyxRQVBEQSxlQU9DO0FBQUEsTUFOREMsTUFNQyxRQU5EQSxNQU1DO0FBQUEsTUFMREMsMkJBS0MsUUFMREEsMkJBS0M7QUFBQSxNQUpEQywyQkFJQyxRQUpEQSwyQkFJQztBQUFBLE1BSERDLDJCQUdDLFFBSERBLDJCQUdDO0FBQUEsTUFGREMsZUFFQyxRQUZEQSxlQUVDO0FBQUEsTUFEREMsaUJBQ0MsUUFEREEsaUJBQ0M7O0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsTUFBSSxDQUFDUixXQUFMLEVBQWtCO0FBQ2hCQSxJQUFBQSxXQUFXLEdBQUdTLHlCQUFZQywwQkFBWixFQUFkO0FBRUEsUUFBTUMsTUFBTSxHQUFHWCxXQUFXLENBQUNZLFVBQTNCLENBSGdCLENBS2hCO0FBQ0E7O0FBQ0FELElBQUFBLE1BQU0sQ0FBQ0UsbUJBQVAsR0FBNkIsWUFBTTtBQUNqQyxVQUFJLENBQUNGLE1BQU0sQ0FBQ0csV0FBWixFQUF5QjtBQUN2QjtBQUNEOztBQUVESCxNQUFBQSxNQUFNLENBQUNJLFlBQVAsQ0FBb0JDLHFCQUFwQixDQUEwQ0wsTUFBTSxDQUFDRyxXQUFqRDtBQUNBSCxNQUFBQSxNQUFNLENBQUNHLFdBQVAsQ0FBbUJHLEtBQW5CLEtBQTZCLFNBQTdCLElBQTBDTixNQUFNLENBQUNHLFdBQVAsQ0FBbUJJLE9BQW5CLEVBQTFDO0FBQ0QsS0FQRDtBQVFEOztBQUVELFNBQU8saUJBQTRCO0FBQUEsUUFBekJDLGtCQUF5QixTQUF6QkEsa0JBQXlCO0FBQ2pDLFFBQU1DLFFBQVEsR0FBRyw2QkFBZTtBQUM5QnBCLE1BQUFBLFdBQVcsRUFBWEEsV0FEOEI7QUFFOUJDLE1BQUFBLGtCQUFrQixFQUFsQkEsa0JBRjhCO0FBRzlCQyxNQUFBQSxlQUFlLEVBQWZBLGVBSDhCO0FBSTlCbUIsTUFBQUEsaUJBQWlCLEVBQUUsZ0JBQVNGLGtCQUFULGlCQUpXO0FBSzlCaEIsTUFBQUEsTUFBTSxFQUFOQSxNQUw4QjtBQU05QkMsTUFBQUEsMkJBQTJCLEVBQTNCQSwyQkFOOEI7QUFPOUJDLE1BQUFBLDJCQUEyQixFQUEzQkEsMkJBUDhCO0FBUTlCQyxNQUFBQSwyQkFBMkIsRUFBM0JBLDJCQVI4QjtBQVM5QkMsTUFBQUEsZUFBZSxFQUFmQSxlQVQ4QjtBQVU5QkMsTUFBQUEsaUJBQWlCLEVBQWpCQTtBQVY4QixLQUFmLENBQWpCO0FBRGlDLFFBY3pCYyxpQkFkeUIsR0FjMkRGLFFBZDNELENBY3pCRSxpQkFkeUI7QUFBQSxRQWNOQyxpQkFkTSxHQWMyREgsUUFkM0QsQ0FjTkcsaUJBZE07QUFBQSxRQWNhQyxlQWRiLEdBYzJESixRQWQzRCxDQWNhSSxlQWRiO0FBQUEsUUFjOEJDLHdCQWQ5QixHQWMyREwsUUFkM0QsQ0FjOEJLLHdCQWQ5QjtBQWdCakMsV0FBTztBQUNMSCxNQUFBQSxpQkFBaUIsRUFBakJBLGlCQURLO0FBRUxDLE1BQUFBLGlCQUFpQixFQUFqQkEsaUJBRks7QUFHTEMsTUFBQUEsZUFBZSxFQUFmQSxlQUhLO0FBSUxDLE1BQUFBLHdCQUF3QixFQUF4QkE7QUFKSyxLQUFQO0FBTUQsR0F0QkQ7QUF1QkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdWRpb0NvbmZpZyB9IGZyb20gJ21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvQXVkaW8vQXVkaW9Db25maWcnO1xuaW1wb3J0IGNyZWF0ZVBvbnlmaWxsIGZyb20gJ3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL2xpYi9TcGVlY2hTZXJ2aWNlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNvZ25pdGl2ZVNlcnZpY2VzU3BlZWNoU2VydmljZXNQb255ZmlsbEZhY3Rvcnkoe1xuICBhdWRpb0NvbmZpZyxcbiAgYXV0aG9yaXphdGlvblRva2VuLFxuICBlbmFibGVUZWxlbWV0cnksXG4gIHJlZ2lvbixcbiAgc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkLFxuICBzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQsXG4gIHNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCxcbiAgc3Vic2NyaXB0aW9uS2V5LFxuICB0ZXh0Tm9ybWFsaXphdGlvblxufSkge1xuICAvLyBIQUNLOiBXZSBzaG91bGQgcHJldmVudCBBdWRpb0NvbnRleHQgb2JqZWN0IGZyb20gYmVpbmcgcmVjcmVhdGVkIGJlY2F1c2UgdGhleSBtYXkgYmUgYmxlc3NlZCBhbmQgVVgtd2lzZSBleHBlbnNpdmUgdG8gcmVjcmVhdGUuXG4gIC8vICAgICAgIEluIENvZ25pdGl2ZSBTZXJ2aWNlcyBTREssIGlmIHRoZXkgZGV0ZWN0IHRoZSBcImVuZFwiIGZ1bmN0aW9uIGlzIGZhbHN5LCB0aGV5IHdpbGwgbm90IGNhbGwgXCJlbmRcIiBidXQgXCJzdXNwZW5kXCIgaW5zdGVhZC5cbiAgLy8gICAgICAgQW5kIG9uIG5leHQgcmVjb2duaXRpb24sIHRoZXkgd2lsbCByZS11c2UgdGhlIEF1ZGlvQ29udGV4dCBvYmplY3QuXG4gIGlmICghYXVkaW9Db25maWcpIHtcbiAgICBhdWRpb0NvbmZpZyA9IEF1ZGlvQ29uZmlnLmZyb21EZWZhdWx0TWljcm9waG9uZUlucHV0KCk7XG5cbiAgICBjb25zdCBzb3VyY2UgPSBhdWRpb0NvbmZpZy5wcml2U291cmNlO1xuXG4gICAgLy8gVGhpcyBwaWVjZSBvZiBjb2RlIGlzIGFkb3B0ZWQgZnJvbSBtaWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9jb21tb24uYnJvd3Nlci9NaWNBdWRpb1NvdXJjZS50cy5cbiAgICAvLyBJbnN0ZWFkIG9mIGNsb3NpbmcgdGhlIEF1ZGlvQ29udGV4dCwgaXQgd2lsbCBqdXN0IHN1c3BlbmQgaXQuIEFuZCB0aGUgbmV4dCB0aW1lIGl0IGlzIG5lZWRlZCwgaXQgd2lsbCBiZSByZXN1bWVkIChieSB0aGUgb3JpZ2luYWwgY29kZSkuXG4gICAgc291cmNlLmRlc3Ryb3lBdWRpb0NvbnRleHQgPSAoKSA9PiB7XG4gICAgICBpZiAoIXNvdXJjZS5wcml2Q29udGV4dCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNvdXJjZS5wcml2UmVjb3JkZXIucmVsZWFzZU1lZGlhUmVzb3VyY2VzKHNvdXJjZS5wcml2Q29udGV4dCk7XG4gICAgICBzb3VyY2UucHJpdkNvbnRleHQuc3RhdGUgPT09ICdydW5uaW5nJyAmJiBzb3VyY2UucHJpdkNvbnRleHQuc3VzcGVuZCgpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gKHsgcmVmZXJlbmNlR3JhbW1hcklEIH0pID0+IHtcbiAgICBjb25zdCBwb255ZmlsbCA9IGNyZWF0ZVBvbnlmaWxsKHtcbiAgICAgIGF1ZGlvQ29uZmlnLFxuICAgICAgYXV0aG9yaXphdGlvblRva2VuLFxuICAgICAgZW5hYmxlVGVsZW1ldHJ5LFxuICAgICAgcmVmZXJlbmNlR3JhbW1hcnM6IFtgbHVpcy8ke3JlZmVyZW5jZUdyYW1tYXJJRH0tUFJPRFVDVElPTmBdLFxuICAgICAgcmVnaW9uLFxuICAgICAgc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkLFxuICAgICAgc3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkLFxuICAgICAgc3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0LFxuICAgICAgc3Vic2NyaXB0aW9uS2V5LFxuICAgICAgdGV4dE5vcm1hbGl6YXRpb25cbiAgICB9KTtcblxuICAgIGNvbnN0IHsgU3BlZWNoR3JhbW1hckxpc3QsIFNwZWVjaFJlY29nbml0aW9uLCBzcGVlY2hTeW50aGVzaXMsIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSB9ID0gcG9ueWZpbGw7XG5cbiAgICByZXR1cm4ge1xuICAgICAgU3BlZWNoR3JhbW1hckxpc3QsXG4gICAgICBTcGVlY2hSZWNvZ25pdGlvbixcbiAgICAgIHNwZWVjaFN5bnRoZXNpcyxcbiAgICAgIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZVxuICAgIH07XG4gIH07XG59XG4iXX0=
