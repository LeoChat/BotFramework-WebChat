'use strict';

var _interopRequireWildcard = require('@babel/runtime/helpers/interopRequireWildcard');

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireWildcard(require('react'));

var _botframeworkWebchatComponent = require('botframework-webchat-component');

var _AdaptiveCardBuilder = _interopRequireDefault(require('./AdaptiveCardBuilder'));

var _AdaptiveCardRenderer = _interopRequireDefault(require('./AdaptiveCardRenderer'));

var CommonCard = function CommonCard(_ref) {
  var adaptiveCardHostConfig = _ref.adaptiveCardHostConfig,
    adaptiveCards = _ref.adaptiveCards,
    content = _ref.attachment.content,
    options = _ref.styleSet.options;
  var builtCard = (0, _react.useMemo)(
    function() {
      if (content) {
        var builder = new _AdaptiveCardBuilder.default(adaptiveCards, options);
        builder.addCommon(content);
        return builder.card;
      }
    },
    [adaptiveCards, content, options]
  );
  return _react.default.createElement(_AdaptiveCardRenderer.default, {
    adaptiveCard: builtCard,
    adaptiveCardHostConfig: adaptiveCardHostConfig,
    tapAction: content && content.tap
  });
};

CommonCard.propTypes = {
  adaptiveCardHostConfig: _propTypes.default.any.isRequired,
  adaptiveCards: _propTypes.default.any.isRequired,
  attachment: _propTypes.default.shape({
    content: _propTypes.default.shape({
      tap: _propTypes.default.any
    }).isRequired
  }).isRequired,
  styleSet: _propTypes.default.any.isRequired
};

var _default = (0, _botframeworkWebchatComponent.connectToWebChat)(function(_ref2) {
  var styleSet = _ref2.styleSet;
  return {
    styleSet: styleSet
  };
})(CommonCard);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvQ29tbW9uQ2FyZC5qcyJdLCJuYW1lcyI6WyJDb21tb25DYXJkIiwiYWRhcHRpdmVDYXJkSG9zdENvbmZpZyIsImFkYXB0aXZlQ2FyZHMiLCJjb250ZW50IiwiYXR0YWNobWVudCIsIm9wdGlvbnMiLCJzdHlsZVNldCIsImJ1aWx0Q2FyZCIsImJ1aWxkZXIiLCJBZGFwdGl2ZUNhcmRCdWlsZGVyIiwiYWRkQ29tbW9uIiwiY2FyZCIsInRhcCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFueSIsImlzUmVxdWlyZWQiLCJzaGFwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFNQSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxPQUErRjtBQUFBLE1BQTVGQyxzQkFBNEYsUUFBNUZBLHNCQUE0RjtBQUFBLE1BQXBFQyxhQUFvRSxRQUFwRUEsYUFBb0U7QUFBQSxNQUF2Q0MsT0FBdUMsUUFBckRDLFVBQXFELENBQXZDRCxPQUF1QztBQUFBLE1BQWhCRSxPQUFnQixRQUE1QkMsUUFBNEIsQ0FBaEJELE9BQWdCO0FBQ2hILE1BQU1FLFNBQVMsR0FBRyxvQkFBUSxZQUFNO0FBQzlCLFFBQUlKLE9BQUosRUFBYTtBQUNYLFVBQU1LLE9BQU8sR0FBRyxJQUFJQyw0QkFBSixDQUF3QlAsYUFBeEIsRUFBdUNHLE9BQXZDLENBQWhCO0FBRUFHLE1BQUFBLE9BQU8sQ0FBQ0UsU0FBUixDQUFrQlAsT0FBbEI7QUFFQSxhQUFPSyxPQUFPLENBQUNHLElBQWY7QUFDRDtBQUNGLEdBUmlCLEVBUWYsQ0FBQ1QsYUFBRCxFQUFnQkMsT0FBaEIsRUFBeUJFLE9BQXpCLENBUmUsQ0FBbEI7QUFVQSxTQUNFLDZCQUFDLDZCQUFEO0FBQ0UsSUFBQSxZQUFZLEVBQUVFLFNBRGhCO0FBRUUsSUFBQSxzQkFBc0IsRUFBRU4sc0JBRjFCO0FBR0UsSUFBQSxTQUFTLEVBQUVFLE9BQU8sSUFBSUEsT0FBTyxDQUFDUztBQUhoQyxJQURGO0FBT0QsQ0FsQkQ7O0FBb0JBWixVQUFVLENBQUNhLFNBQVgsR0FBdUI7QUFDckJaLEVBQUFBLHNCQUFzQixFQUFFYSxtQkFBVUMsR0FBVixDQUFjQyxVQURqQjtBQUVyQmQsRUFBQUEsYUFBYSxFQUFFWSxtQkFBVUMsR0FBVixDQUFjQyxVQUZSO0FBR3JCWixFQUFBQSxVQUFVLEVBQUVVLG1CQUFVRyxLQUFWLENBQWdCO0FBQzFCZCxJQUFBQSxPQUFPLEVBQUVXLG1CQUFVRyxLQUFWLENBQWdCO0FBQ3ZCTCxNQUFBQSxHQUFHLEVBQUVFLG1CQUFVQztBQURRLEtBQWhCLEVBRU5DO0FBSHVCLEdBQWhCLEVBSVRBLFVBUGtCO0FBUXJCVixFQUFBQSxRQUFRLEVBQUVRLG1CQUFVQyxHQUFWLENBQWNDO0FBUkgsQ0FBdkI7O2VBV2Usb0RBQWlCO0FBQUEsTUFBR1YsUUFBSCxTQUFHQSxRQUFIO0FBQUEsU0FBbUI7QUFBRUEsSUFBQUEsUUFBUSxFQUFSQTtBQUFGLEdBQW5CO0FBQUEsQ0FBakIsRUFBbUROLFVBQW5ELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGNvbm5lY3RUb1dlYkNoYXQgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb21wb25lbnQnO1xuaW1wb3J0IEFkYXB0aXZlQ2FyZEJ1aWxkZXIgZnJvbSAnLi9BZGFwdGl2ZUNhcmRCdWlsZGVyJztcbmltcG9ydCBBZGFwdGl2ZUNhcmRSZW5kZXJlciBmcm9tICcuL0FkYXB0aXZlQ2FyZFJlbmRlcmVyJztcblxuY29uc3QgQ29tbW9uQ2FyZCA9ICh7IGFkYXB0aXZlQ2FyZEhvc3RDb25maWcsIGFkYXB0aXZlQ2FyZHMsIGF0dGFjaG1lbnQ6IHsgY29udGVudCB9LCBzdHlsZVNldDogeyBvcHRpb25zIH0gfSkgPT4ge1xuICBjb25zdCBidWlsdENhcmQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoY29udGVudCkge1xuICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBBZGFwdGl2ZUNhcmRCdWlsZGVyKGFkYXB0aXZlQ2FyZHMsIG9wdGlvbnMpO1xuXG4gICAgICBidWlsZGVyLmFkZENvbW1vbihjb250ZW50KTtcblxuICAgICAgcmV0dXJuIGJ1aWxkZXIuY2FyZDtcbiAgICB9XG4gIH0sIFthZGFwdGl2ZUNhcmRzLCBjb250ZW50LCBvcHRpb25zXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QWRhcHRpdmVDYXJkUmVuZGVyZXJcbiAgICAgIGFkYXB0aXZlQ2FyZD17YnVpbHRDYXJkfVxuICAgICAgYWRhcHRpdmVDYXJkSG9zdENvbmZpZz17YWRhcHRpdmVDYXJkSG9zdENvbmZpZ31cbiAgICAgIHRhcEFjdGlvbj17Y29udGVudCAmJiBjb250ZW50LnRhcH1cbiAgICAvPlxuICApO1xufTtcblxuQ29tbW9uQ2FyZC5wcm9wVHlwZXMgPSB7XG4gIGFkYXB0aXZlQ2FyZEhvc3RDb25maWc6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcbiAgYWRhcHRpdmVDYXJkczogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBhdHRhY2htZW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGNvbnRlbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB0YXA6IFByb3BUeXBlcy5hbnlcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWQsXG4gIHN0eWxlU2V0OiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3RUb1dlYkNoYXQoKHsgc3R5bGVTZXQgfSkgPT4gKHsgc3R5bGVTZXQgfSkpKENvbW1vbkNhcmQpO1xuIl19
