'use strict';

var _interopRequireWildcard = require('@babel/runtime/helpers/interopRequireWildcard');

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireWildcard(require('react'));

var _botframeworkWebchatComponent = require('botframework-webchat-component');

var _AdaptiveCardBuilder = _interopRequireDefault(require('./AdaptiveCardBuilder'));

var _AdaptiveCardRenderer = _interopRequireDefault(require('./AdaptiveCardRenderer'));

var useStyleOptions = _botframeworkWebchatComponent.hooks.useStyleOptions;

var CommonCard = function CommonCard(_ref) {
  var adaptiveCardHostConfig = _ref.adaptiveCardHostConfig,
    adaptiveCards = _ref.adaptiveCards,
    content = _ref.attachment.content;

  var _useStyleOptions = useStyleOptions(),
    _useStyleOptions2 = (0, _slicedToArray2.default)(_useStyleOptions, 1),
    styleOptions = _useStyleOptions2[0];

  var builtCard = (0, _react.useMemo)(
    function() {
      if (content) {
        var builder = new _AdaptiveCardBuilder.default(adaptiveCards, styleOptions);
        builder.addCommon(content);
        return builder.card;
      }
    },
    [adaptiveCards, content, styleOptions]
  );
  return _react.default.createElement(_AdaptiveCardRenderer.default, {
    adaptiveCard: builtCard,
    adaptiveCardHostConfig: adaptiveCardHostConfig,
    tapAction: content && content.tap
  });
};

CommonCard.propTypes = {
  adaptiveCardHostConfig: _propTypes.default.any.isRequired,
  adaptiveCards: _propTypes.default.any.isRequired,
  attachment: _propTypes.default.shape({
    content: _propTypes.default.shape({
      tap: _propTypes.default.any
    }).isRequired
  }).isRequired
};
var _default = CommonCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvQ29tbW9uQ2FyZC5qcyJdLCJuYW1lcyI6WyJ1c2VTdHlsZU9wdGlvbnMiLCJob29rcyIsIkNvbW1vbkNhcmQiLCJhZGFwdGl2ZUNhcmRIb3N0Q29uZmlnIiwiYWRhcHRpdmVDYXJkcyIsImNvbnRlbnQiLCJhdHRhY2htZW50Iiwic3R5bGVPcHRpb25zIiwiYnVpbHRDYXJkIiwiYnVpbGRlciIsIkFkYXB0aXZlQ2FyZEJ1aWxkZXIiLCJhZGRDb21tb24iLCJjYXJkIiwidGFwIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYW55IiwiaXNSZXF1aXJlZCIsInNoYXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0lBRVFBLGUsR0FBb0JDLG1DLENBQXBCRCxlOztBQUVSLElBQU1FLFVBQVUsR0FBRyxTQUFiQSxVQUFhLE9BQXdFO0FBQUEsTUFBckVDLHNCQUFxRSxRQUFyRUEsc0JBQXFFO0FBQUEsTUFBN0NDLGFBQTZDLFFBQTdDQSxhQUE2QztBQUFBLE1BQWhCQyxPQUFnQixRQUE5QkMsVUFBOEIsQ0FBaEJELE9BQWdCOztBQUFBLHlCQUNsRUwsZUFBZSxFQURtRDtBQUFBO0FBQUEsTUFDbEZPLFlBRGtGOztBQUd6RixNQUFNQyxTQUFTLEdBQUcsb0JBQVEsWUFBTTtBQUM5QixRQUFJSCxPQUFKLEVBQWE7QUFDWCxVQUFNSSxPQUFPLEdBQUcsSUFBSUMsNEJBQUosQ0FBd0JOLGFBQXhCLEVBQXVDRyxZQUF2QyxDQUFoQjtBQUVBRSxNQUFBQSxPQUFPLENBQUNFLFNBQVIsQ0FBa0JOLE9BQWxCO0FBRUEsYUFBT0ksT0FBTyxDQUFDRyxJQUFmO0FBQ0Q7QUFDRixHQVJpQixFQVFmLENBQUNSLGFBQUQsRUFBZ0JDLE9BQWhCLEVBQXlCRSxZQUF6QixDQVJlLENBQWxCO0FBVUEsU0FDRSw2QkFBQyw2QkFBRDtBQUNFLElBQUEsWUFBWSxFQUFFQyxTQURoQjtBQUVFLElBQUEsc0JBQXNCLEVBQUVMLHNCQUYxQjtBQUdFLElBQUEsU0FBUyxFQUFFRSxPQUFPLElBQUlBLE9BQU8sQ0FBQ1E7QUFIaEMsSUFERjtBQU9ELENBcEJEOztBQXNCQVgsVUFBVSxDQUFDWSxTQUFYLEdBQXVCO0FBQ3JCWCxFQUFBQSxzQkFBc0IsRUFBRVksbUJBQVVDLEdBQVYsQ0FBY0MsVUFEakI7QUFFckJiLEVBQUFBLGFBQWEsRUFBRVcsbUJBQVVDLEdBQVYsQ0FBY0MsVUFGUjtBQUdyQlgsRUFBQUEsVUFBVSxFQUFFUyxtQkFBVUcsS0FBVixDQUFnQjtBQUMxQmIsSUFBQUEsT0FBTyxFQUFFVSxtQkFBVUcsS0FBVixDQUFnQjtBQUN2QkwsTUFBQUEsR0FBRyxFQUFFRSxtQkFBVUM7QUFEUSxLQUFoQixFQUVOQztBQUh1QixHQUFoQixFQUlUQTtBQVBrQixDQUF2QjtlQVVlZixVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBob29rcyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvbXBvbmVudCc7XG5pbXBvcnQgQWRhcHRpdmVDYXJkQnVpbGRlciBmcm9tICcuL0FkYXB0aXZlQ2FyZEJ1aWxkZXInO1xuaW1wb3J0IEFkYXB0aXZlQ2FyZFJlbmRlcmVyIGZyb20gJy4vQWRhcHRpdmVDYXJkUmVuZGVyZXInO1xuXG5jb25zdCB7IHVzZVN0eWxlT3B0aW9ucyB9ID0gaG9va3M7XG5cbmNvbnN0IENvbW1vbkNhcmQgPSAoeyBhZGFwdGl2ZUNhcmRIb3N0Q29uZmlnLCBhZGFwdGl2ZUNhcmRzLCBhdHRhY2htZW50OiB7IGNvbnRlbnQgfSB9KSA9PiB7XG4gIGNvbnN0IFtzdHlsZU9wdGlvbnNdID0gdXNlU3R5bGVPcHRpb25zKCk7XG5cbiAgY29uc3QgYnVpbHRDYXJkID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgQWRhcHRpdmVDYXJkQnVpbGRlcihhZGFwdGl2ZUNhcmRzLCBzdHlsZU9wdGlvbnMpO1xuXG4gICAgICBidWlsZGVyLmFkZENvbW1vbihjb250ZW50KTtcblxuICAgICAgcmV0dXJuIGJ1aWxkZXIuY2FyZDtcbiAgICB9XG4gIH0sIFthZGFwdGl2ZUNhcmRzLCBjb250ZW50LCBzdHlsZU9wdGlvbnNdKTtcblxuICByZXR1cm4gKFxuICAgIDxBZGFwdGl2ZUNhcmRSZW5kZXJlclxuICAgICAgYWRhcHRpdmVDYXJkPXtidWlsdENhcmR9XG4gICAgICBhZGFwdGl2ZUNhcmRIb3N0Q29uZmlnPXthZGFwdGl2ZUNhcmRIb3N0Q29uZmlnfVxuICAgICAgdGFwQWN0aW9uPXtjb250ZW50ICYmIGNvbnRlbnQudGFwfVxuICAgIC8+XG4gICk7XG59O1xuXG5Db21tb25DYXJkLnByb3BUeXBlcyA9IHtcbiAgYWRhcHRpdmVDYXJkSG9zdENvbmZpZzogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBhZGFwdGl2ZUNhcmRzOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gIGF0dGFjaG1lbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY29udGVudDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHRhcDogUHJvcFR5cGVzLmFueVxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tbW9uQ2FyZDtcbiJdfQ==
